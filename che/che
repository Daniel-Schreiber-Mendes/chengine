#!/bin/bash


param_check () 
{
	if [ -z "$1" ] 
	then
		echo "Not enough arguments given"
		exit
	fi
}


create_makefile ()
{
	cat << EOF > Makefile
SRC =
OBJ = \$(SRC:.c=.o)
LIBS =
EXE = ${1}
VER = -std=c99
MODE = -g
OPT = -O0
ERR = -Wall -Wuninitialized -Werror=implicit-function-declaration -Wextra -Wno-unused-parameter -Wno-incompatible-pointer-types -Werror=int-conversion
LFLAGS = -o
CFLAGS = \$(ERR) \$(VER) \$(OPT) -c \$(MODE)

run: \$(EXE)
	./\$(EXE)

\$(EXE): \$(OBJ)
	gcc \$(LFLAGS) \$(EXE) \$(OBJ) \$(LIBS)

%.o: %.c
	gcc -c \$(CFLAGS) \$*.c
EOF
}


if [ "$1" = "install" ]
then
	if [ "$2" = "module" ]
	then
		param_check $3
		files=""
		for file in modules/"$3"/*.c
		do 
			files+=" $file"
		done
		sed -i "1s|.*|&$files|" Makefile
		#| seperators instead of / were used because the variable files contains /
	elif [ "$2" = "che" ]
	then
		sudo mv che /usr/bin
	else
		echo "Unkown install argument: ${2}"
	fi
elif [ "$1" = "remove" ]
then
	if [ "$2" = "module" ]
	then
		param_check $3
		for file in modules/"$3"/*.c
		do 
			sed -e "s|$file||g" -i Makefile
			#replaces all occurances of $file with nothing
		done
		rm -r modules/$3
	elif [ "$2" = "project" ]
	then
		rm -r modules states
		rm Makefile
	elif [ "$2" = "che" ]
	then
		sudo rm /usr/bin/che
	else
		echo "Unkown remove argument: ${2}"
	fi
elif [ "$1" = "create" ]
then
	if [ "$2" = "module" ]
	then
		param_check $3
		mkdir modules/$3
		echo -e "#ifndef ${3^^}_MOD_H\n#define ${3^^}_MOD_H\n\n\n\n#endif" > modules/$3/$3.h 
		#-e makes echo interpret \n as a newline character, otherwise it would just print it into the file
		#^^ makes the string before that fully uppercase
	elif [ "$2" = "project" ]
	then
		param_check $3
		mkdir modules
		mkdir states
		create_makefile $3
	else
		echo "Unkown create argument: ${2}"
	fi
elif [ "$1" = "update" ]
then
	if [ "$2" = "module" ]
	then
		param_check $3

		read -r firstline < Makefile
		for file in modules/$3/*.c
		do
			if [[ firstline != *"$file"* ]]
			then
				sed -i "1s|.*|& $file|" Makefile
			fi
		done
	elif [ "$2" = "states" ]
	then
		read -r firstline < Makefile
		for file in states/*.c
		do
			if [[ firstline != *"$file"* ]]
			then
				sed -i "1s|.*|& $file|" Makefile
			fi
		done
	elif [ "$2" = "project" ]
	then
		param_check $3
		for mod in modules
		do
			./che update module mod
		done
		./che update states
	else
		echo "Unkown update argument: ${2}"
	fi
else
	echo "Unkown command: ${1}"
fi