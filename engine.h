#ifndef ENGINE_H
#define ENGINE_H
#include "./src/utility/utility.h"
#include <cglm/cglm.h>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <checs/checs.h>
#include <stdbool.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
//#include <math.h>
#include <string.h>
#include <AL/al.h>
#include <AL/alc.h>


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Definions required by vendor ///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define CIMGUI_DEFINE_ENUMS_AND_STRUCTS


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Render-Utility-Types ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


typedef struct 
{
	GLint componentCount;
	GLenum type;
	GLboolean normalized;
}
VertexBufferLayoutElement;


typedef struct
{
	VertexBufferLayoutElement* elements;
	uint8_t elementCount;
	GLsizei stride;
}
VertexBufferLayout;


typedef struct
{
	GLuint id;
	GLsizei elementCount;
}ElementBuffer;


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Components /////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define RenderableComponent 	0
#define TransformComponent 		1
#define KeyInputComponent 		2
#define SoundSourceComponent    3
#define ComponentCount 			4

typedef struct
{
	GLuint vao, program;
	ElementBuffer ebo;
}
Renderable;


typedef struct
{
	vec3 position;
	float rotation;
	float scale;
}
Transform;


typedef struct
{ 
	int i;	
}KeyInput;


typedef struct
{
	ALuint source;
}SoundSource;



void soundSource_construct(SoundSource *const s, char const *const path);
void soundSource_destruct(SoundSource *const s);
void soundSource_sound_play(SoundSource *const s);
void soundSource_position_set(SoundSource *const s, vec3 const pos);
void renderable_construct(Renderable *const r);
void renderable_destruct(Renderable *const r);


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// System-Components //////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define RENDER_SYSTEM_COMPONENTS Renderable, Transform
#define INPUT_SYSTEM_COMPONENTS  InputReceiver


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Tags ///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define CameraTag 0


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Commands ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define WindowCloseCommand     0
#define FramebufferSizeCommand 1
#define KeyCommand 			   2
#define MouseButtonCommand     3
#define JoystickCommand        4
#define ScrollCommand 		   5
#define CommandCount           6


typedef struct
{
	int const width, height;
}
FramebufferSizeData;


typedef struct
{
	int const key, scancode, action, mods;
}
KeyData;


typedef struct
{
	int const button, action, mods;
}
MouseButtonData;


typedef struct
{
	int const jid, event;
}
JoystickData;


typedef struct
{
	double yoffset;
}
ScrollData;



/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Commands ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define KeyEvent 		 0
#define MouseButtonEvent 1
#define JoystickEvent    2
#define EventCount       3


typedef struct
{
	int const key, scancode, action, mods;
}
KeyEventData;


typedef struct
{
	int const button, action, mods;
}
MouseButtonEventData;


typedef struct
{
	int const jid, event;
}
JoystickEventData;


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// State-Base-Type  ///////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


typedef struct State State;
struct State 
{
	bool drawing, updating;
    void(*destruct)(State *const);
    void(*update)(State *const);
    void(*draw)(State *const);
};


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Resource-Loading-Utility-Types  ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


typedef struct
{
	int width, height, bbp; //bits per pixel
	uint8_t *buffer;
	GLuint id;
}
Texture;


typedef struct
{
	char *buffer;
	uint16_t bufferSize; //size in bytes
}
File;



/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Window  ////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


extern GLFWwindow* window;


void window_init(char const* const title, uint16_t const n_width, uint16_t const n_height);
void window_terminate(void);
void window_fullscreen_set(bool const set);
void window_fullscreen_switch(void);
void window_vsync_set(bool const set);


void inputManager_init(void);
void inputManager_inputReceiver_add(EntityId const entity);


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Statemachine  //////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


void  stateMachine_init(void);
void  stateMachine_state_pop(State *const state);
void _stateMachine_state_push(State *const state);
void  stateMachine_run(void);
void  stateMachine_running_set(bool const n_running);


#define stateMachine_state_push(StateType, stateConstructFunction)\
	State *const state = malloc(sizeof(StateType));\
	stateConstructFunction((StateType*)state);\
	_stateMachine_state_push(state);


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Resources  /////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


void texture_construct(Texture *const texture, char const *const path);
void texture_destruct(Texture const* texture);
void texture_bind(Texture *const texture);


//file.c
void file_load(File *restrict f, char const *const path);
void file_destruct(File const *const f);


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Render  ////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


//vertexBuffer.c
void	vertexBuffer_construct(GLuint *const vbo, GLsizeiptr const size, void const *const data);
void 	vertexBuffer_destruct(GLuint const *const vbo);
void 	vertexBuffer_bind(GLuint const vbo);

//elementBuffer.c
void	elementBuffer_construct(ElementBuffer *const ebo, GLsizeiptr const size, GLsizei const elementCount, void const *const data);
void 	elementBuffer_destruct(ElementBuffer const *const ebo);
void 	elementBuffer_bind(ElementBuffer const *const ebo);

//vertexArray.c
void	vertexArray_construct(GLuint *const vao);
void 	vertexArray_destruct(GLuint const *const vao);
void 	vertexArray_bind(GLuint const vao);
void    vertexArray_buffer_add(GLuint const vao, GLuint const vbo, VertexBufferLayout const layout);

//program.c
void    program_create(GLuint *const program, char const *const fsPath, char const *const vsPath);
void    program_destroy(GLuint const program);
void 	program_bind(GLuint const program);
void    program_uniform4f_set(GLuint const program, char const *const name, GLfloat const v0, GLfloat const v1, GLfloat const v2, GLfloat const v3);
void    program_uniform1i_set(GLuint const program, char const *const name, GLint const v0);
void    program_uniformMat4f_set(GLuint const program, char const *const name, mat4 const m0);


//vertexBufferLayout.c
void    vertexBufferLayout_construct(VertexBufferLayout *const vbl, uint8_t const size);
void    vertexBufferLayout_destruct(VertexBufferLayout const *const vbl);
void    vertexBufferLayout_element_add(VertexBufferLayout *const vbl, VertexBufferLayoutElement const element);


//render_system.c
void render_system(checs_system_parameters);


static void mat4_print(mat4 const m)
{
	for(int i=0; i < 4; ++i)
	{
		for(int j=0; j < 4; ++j)
		{
			printf("%.2f, ", m[i][j]);
		}
		printf("\n");
	}
}



/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Audio //////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


void     audio_init(void);
void     audio_terminate(void);
bool     is_little_endian(void); //returns if the machine stores the bits in gib endian or little endian order
uint16_t convert_byte2_buffer_to_uint16(uint8_t const *const buffer);
ALvoid*  wavFile_load(char const *const path, uint8_t *channels, uint32_t *const sampleRate, uint8_t *const bps, uint32_t *const size);
uint16_t wav_format_get(uint8_t const channels, uint8_t const bps);


#endif