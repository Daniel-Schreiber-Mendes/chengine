#ifndef ENGINE_H
#define ENGINE_H
#include <cglm/cglm.h>
#include <GL/glew.h>
#include <checs/checs.h>

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Definions required by vendor ///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define CIMGUI_DEFINE_ENUMS_AND_STRUCTS


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Render-Utility-Types ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


typedef struct 
{
	GLint componentCount;
	GLenum type;
	GLboolean normalized;
}
VertexBufferLayoutElement;


typedef struct
{
	VertexBufferLayoutElement* elements;
	uint8_t elementCount;
	GLsizei stride;
}
VertexBufferLayout;


typedef struct
{
	GLuint id;
	GLsizei elementCount;
}ElementBuffer;


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Components /////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define RenderableComponent 0
#define TransformComponent 1
#define InputReceiverComponent 2


typedef struct
{
	GLuint vao, program;
	ElementBuffer ebo;
}
Renderable;


typedef struct
{
	float rotation;
	vec3 position;
	vec3 scale;
}
Transform;


typedef struct
{ 
	int p;	
}InputReceiver;


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// System-Components //////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define RENDER_SYSTEM_COMPONENTS Renderable, Transform
#define INPUT_SYSTEM_COMPONENTS  InputReceiver


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Tags ///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define CameraTag 0


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Commands ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define WindowCloseCommand     0
#define FramebufferSizeCommand 1
#define KeyCommand 			   2
#define MouseButtonCommand     3
#define JoystickCommand        4
#define CommandCount           5


typedef struct
{
	int const width, height;
}
FramebufferSizeData;


typedef struct
{
	int const key, scancode, action, mods;
}
KeyData;


typedef struct
{
	int const button, action, mods;
}
MouseButtonData;


typedef struct
{
	int const jid, event;
}
JoystickData;



/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Commands ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


#define KeyEvent 		 0
#define MouseButtonEvent 1
#define JoystickEvent    2
#define EventCount       3


typedef struct
{
	int const key, scancode, action, mods;
}
KeyEventData;


typedef struct
{
	int const button, action, mods;
}
MouseButtonEventData;


typedef struct
{
	int const jid, event;
}
JoystickEventData;


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// State-Base-Type  ///////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


typedef struct State State;
struct State 
{
	bool drawing, updating;
    void(*destruct)(State *const);
    void(*update)(State *const);
    void(*draw)(State *const);
};


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Resource-Loading-Utility-Types  ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/


typedef struct
{
	int width, height, bbp; //bits per pixel
	uint8_t *buffer;
	GLuint id;
}
Texture;


typedef struct
{
	char *buffer;
	uint16_t bufferSize; //size in bytes
}
File;


#endif